-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------

state 14 contains 6 shift/reduce conflicts.
state 15 contains 16 shift/reduce conflicts.
state 24 contains 6 shift/reduce conflicts.
state 25 contains 6 shift/reduce conflicts.
state 26 contains 6 shift/reduce conflicts.
state 27 contains 6 shift/reduce conflicts.
state 28 contains 6 shift/reduce conflicts.
state 29 contains 6 shift/reduce conflicts.
state 30 contains 6 shift/reduce conflicts.
state 31 contains 6 shift/reduce conflicts.
state 43 contains 16 shift/reduce conflicts.
state 45 contains 6 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Exp                               (0)
	Exp -> num                                         (1)
	Exp -> var                                         (2)
	Exp -> false                                       (3)
	Exp -> true                                        (4)
	Exp -> Exp '+' Exp                                 (5)
	Exp -> Exp '-' Exp                                 (6)
	Exp -> Exp '*' Exp                                 (7)
	Exp -> Exp "&&" Exp                                (8)
	Exp -> Exp "||" Exp                                (9)
	Exp -> '!' Exp                                     (10)
	Exp -> if Exp then Exp else Exp                    (11)
	Exp -> '\\' var ':' Type "->" Exp                  (12)
	Exp -> Exp Exp                                     (13)
	Exp -> '(' Exp ')'                                 (14)
	Exp -> Exp "==" Exp                                (15)
	Exp -> Exp ">=" Exp                                (16)
	Exp -> Exp '>' Exp                                 (17)
	Type -> Bool                                       (18)
	Type -> Number                                     (19)
	Type -> '(' Type "->" Type ')'                     (20)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TokenNum $$ }
	'+'            { TokenAdd }
	'-'            { TokenSub }
	'*'            { TokenMul }
	"&&"           { TokenAnd }
	"||"           { TokenOr }
	'!'            { TokenNot }
	"=="           { TokenEq }
	">="           { TokenGeq }
	'>'            { TokenGth }
	true           { TokenTrue }
	false          { TokenFalse }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	var            { TokenVar $$ }
	'\\'           { TokenLam }
	':'            { TokenColon }
	"->"           { TokenArrow }
	'('            { TokenLParen }
	')'            { TokenRParen }
	Bool           { TokenBoolean }
	Number         { TokenNumber }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
	Type            rules 18, 19, 20

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Exp                              (rule 0)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 3

State 1

	Exp -> . num                                        (rule 1)

	num            shift, and enter state 2


State 2

	Exp -> num .                                        (rule 1)

	num            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	"&&"           reduce using rule 1
	"||"           reduce using rule 1
	'!'            reduce using rule 1
	"=="           reduce using rule 1
	">="           reduce using rule 1
	'>'            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	var            reduce using rule 1
	'\\'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parser -> Exp .                              (rule 0)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10
	%eof           accept

	Exp            goto state 15

State 4

	Exp -> '!' . Exp                                    (rule 10)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 14

State 5

	Exp -> true .                                       (rule 4)

	num            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	"&&"           reduce using rule 4
	"||"           reduce using rule 4
	'!'            reduce using rule 4
	"=="           reduce using rule 4
	">="           reduce using rule 4
	'>'            reduce using rule 4
	true           reduce using rule 4
	false          reduce using rule 4
	if             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	var            reduce using rule 4
	'\\'           reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 6

	Exp -> false .                                      (rule 3)

	num            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	"&&"           reduce using rule 3
	"||"           reduce using rule 3
	'!'            reduce using rule 3
	"=="           reduce using rule 3
	">="           reduce using rule 3
	'>'            reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	var            reduce using rule 3
	'\\'           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 7

	Exp -> if . Exp then Exp else Exp                   (rule 11)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 13

State 8

	Exp -> var .                                        (rule 2)

	num            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	"&&"           reduce using rule 2
	"||"           reduce using rule 2
	'!'            reduce using rule 2
	"=="           reduce using rule 2
	">="           reduce using rule 2
	'>'            reduce using rule 2
	true           reduce using rule 2
	false          reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	var            reduce using rule 2
	'\\'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 9

	Exp -> '\\' . var ':' Type "->" Exp                 (rule 12)

	var            shift, and enter state 12


State 10

	Exp -> '(' . Exp ')'                                (rule 14)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 11

State 11

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> '(' Exp . ')'                                (rule 14)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10
	')'            shift, and enter state 34

	Exp            goto state 15

State 12

	Exp -> '\\' var . ':' Type "->" Exp                 (rule 12)

	':'            shift, and enter state 33


State 13

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> if Exp . then Exp else Exp                   (rule 11)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	then           shift, and enter state 32
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 15

State 14

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> '!' Exp .                                    (rule 10)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 10)

	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	"&&"           reduce using rule 10
	"||"           reduce using rule 10
	'!'            reduce using rule 10
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 10)

	false          shift, and enter state 6
			(reduce using rule 10)

	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	var            shift, and enter state 8
			(reduce using rule 10)

	'\\'           shift, and enter state 9
			(reduce using rule 10)

	'('            shift, and enter state 10
			(reduce using rule 10)

	')'            reduce using rule 10
	%eof           reduce using rule 10

	Exp            goto state 15

State 15

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp Exp .                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 13)

	'+'            shift, and enter state 16
			(reduce using rule 13)

	'-'            shift, and enter state 17
			(reduce using rule 13)

	'*'            shift, and enter state 18
			(reduce using rule 13)

	"&&"           shift, and enter state 19
			(reduce using rule 13)

	"||"           shift, and enter state 20
			(reduce using rule 13)

	'!'            shift, and enter state 4
			(reduce using rule 13)

	"=="           shift, and enter state 21
			(reduce using rule 13)

	">="           shift, and enter state 22
			(reduce using rule 13)

	'>'            shift, and enter state 23
			(reduce using rule 13)

	true           shift, and enter state 5
			(reduce using rule 13)

	false          shift, and enter state 6
			(reduce using rule 13)

	if             shift, and enter state 7
			(reduce using rule 13)

	then           reduce using rule 13
	else           reduce using rule 13
	var            shift, and enter state 8
			(reduce using rule 13)

	'\\'           shift, and enter state 9
			(reduce using rule 13)

	'('            shift, and enter state 10
			(reduce using rule 13)

	')'            reduce using rule 13
	%eof           reduce using rule 13

	Exp            goto state 15

State 16

	Exp -> Exp '+' . Exp                                (rule 5)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 31

State 17

	Exp -> Exp '-' . Exp                                (rule 6)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 30

State 18

	Exp -> Exp '*' . Exp                                (rule 7)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 29

State 19

	Exp -> Exp "&&" . Exp                               (rule 8)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 28

State 20

	Exp -> Exp "||" . Exp                               (rule 9)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 27

State 21

	Exp -> Exp "==" . Exp                               (rule 15)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 26

State 22

	Exp -> Exp ">=" . Exp                               (rule 16)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 25

State 23

	Exp -> Exp '>' . Exp                                (rule 17)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 24

State 24

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)
	Exp -> Exp '>' Exp .                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 17)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	"&&"           reduce using rule 17
	"||"           reduce using rule 17
	'!'            reduce using rule 17
	"=="           reduce using rule 17
	">="           reduce using rule 17
	'>'            reduce using rule 17
	true           shift, and enter state 5
			(reduce using rule 17)

	false          shift, and enter state 6
			(reduce using rule 17)

	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	var            shift, and enter state 8
			(reduce using rule 17)

	'\\'           shift, and enter state 9
			(reduce using rule 17)

	'('            shift, and enter state 10
			(reduce using rule 17)

	')'            reduce using rule 17
	%eof           reduce using rule 17

	Exp            goto state 15

State 25

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp ">=" Exp .                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 16)

	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	"&&"           reduce using rule 16
	"||"           reduce using rule 16
	'!'            reduce using rule 16
	"=="           reduce using rule 16
	">="           reduce using rule 16
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 16)

	false          shift, and enter state 6
			(reduce using rule 16)

	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	var            shift, and enter state 8
			(reduce using rule 16)

	'\\'           shift, and enter state 9
			(reduce using rule 16)

	'('            shift, and enter state 10
			(reduce using rule 16)

	')'            reduce using rule 16
	%eof           reduce using rule 16

	Exp            goto state 15

State 26

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp "==" Exp .                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 15)

	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	"&&"           reduce using rule 15
	"||"           reduce using rule 15
	'!'            reduce using rule 15
	"=="           reduce using rule 15
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 15)

	false          shift, and enter state 6
			(reduce using rule 15)

	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	var            shift, and enter state 8
			(reduce using rule 15)

	'\\'           shift, and enter state 9
			(reduce using rule 15)

	'('            shift, and enter state 10
			(reduce using rule 15)

	')'            reduce using rule 15
	%eof           reduce using rule 15

	Exp            goto state 15

State 27

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp "||" Exp .                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 9)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	"&&"           reduce using rule 9
	"||"           reduce using rule 9
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 9)

	false          shift, and enter state 6
			(reduce using rule 9)

	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	var            shift, and enter state 8
			(reduce using rule 9)

	'\\'           shift, and enter state 9
			(reduce using rule 9)

	'('            shift, and enter state 10
			(reduce using rule 9)

	')'            reduce using rule 9
	%eof           reduce using rule 9

	Exp            goto state 15

State 28

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp "&&" Exp .                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	"&&"           reduce using rule 8
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 8)

	false          shift, and enter state 6
			(reduce using rule 8)

	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	var            shift, and enter state 8
			(reduce using rule 8)

	'\\'           shift, and enter state 9
			(reduce using rule 8)

	'('            shift, and enter state 10
			(reduce using rule 8)

	')'            reduce using rule 8
	%eof           reduce using rule 8

	Exp            goto state 15

State 29

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp '*' Exp .                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 7)

	false          shift, and enter state 6
			(reduce using rule 7)

	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	var            shift, and enter state 8
			(reduce using rule 7)

	'\\'           shift, and enter state 9
			(reduce using rule 7)

	'('            shift, and enter state 10
			(reduce using rule 7)

	')'            reduce using rule 7
	%eof           reduce using rule 7

	Exp            goto state 15

State 30

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp '-' Exp .                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            shift, and enter state 18
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 6)

	false          shift, and enter state 6
			(reduce using rule 6)

	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	var            shift, and enter state 8
			(reduce using rule 6)

	'\\'           shift, and enter state 9
			(reduce using rule 6)

	'('            shift, and enter state 10
			(reduce using rule 6)

	')'            reduce using rule 6
	%eof           reduce using rule 6

	Exp            goto state 15

State 31

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp '+' Exp .                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            shift, and enter state 18
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 5)

	false          shift, and enter state 6
			(reduce using rule 5)

	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	var            shift, and enter state 8
			(reduce using rule 5)

	'\\'           shift, and enter state 9
			(reduce using rule 5)

	'('            shift, and enter state 10
			(reduce using rule 5)

	')'            reduce using rule 5
	%eof           reduce using rule 5

	Exp            goto state 15

State 32

	Exp -> if Exp then . Exp else Exp                   (rule 11)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 39

State 33

	Exp -> '\\' var ':' . Type "->" Exp                 (rule 12)

	'('            shift, and enter state 36
	Bool           shift, and enter state 37
	Number         shift, and enter state 38

	Type           goto state 35

State 34

	Exp -> '(' Exp ')' .                                (rule 14)

	num            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	"&&"           reduce using rule 14
	"||"           reduce using rule 14
	'!'            reduce using rule 14
	"=="           reduce using rule 14
	">="           reduce using rule 14
	'>'            reduce using rule 14
	true           reduce using rule 14
	false          reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	var            reduce using rule 14
	'\\'           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	%eof           reduce using rule 14


State 35

	Exp -> '\\' var ':' Type . "->" Exp                 (rule 12)

	"->"           shift, and enter state 42


State 36

	Type -> '(' . Type "->" Type ')'                    (rule 20)

	'('            shift, and enter state 36
	Bool           shift, and enter state 37
	Number         shift, and enter state 38

	Type           goto state 41

State 37

	Type -> Bool .                                      (rule 18)

	"->"           reduce using rule 18
	')'            reduce using rule 18


State 38

	Type -> Number .                                    (rule 19)

	"->"           reduce using rule 19
	')'            reduce using rule 19


State 39

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> if Exp then Exp . else Exp                   (rule 11)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	else           shift, and enter state 40
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 15

State 40

	Exp -> if Exp then Exp else . Exp                   (rule 11)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 45

State 41

	Type -> '(' Type . "->" Type ')'                    (rule 20)

	"->"           shift, and enter state 44


State 42

	Exp -> '\\' var ':' Type "->" . Exp                 (rule 12)

	num            shift, and enter state 2
	'!'            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	if             shift, and enter state 7
	var            shift, and enter state 8
	'\\'           shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 43

State 43

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> '\\' var ':' Type "->" Exp .                 (rule 12)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 12)

	'+'            shift, and enter state 16
			(reduce using rule 12)

	'-'            shift, and enter state 17
			(reduce using rule 12)

	'*'            shift, and enter state 18
			(reduce using rule 12)

	"&&"           shift, and enter state 19
			(reduce using rule 12)

	"||"           shift, and enter state 20
			(reduce using rule 12)

	'!'            shift, and enter state 4
			(reduce using rule 12)

	"=="           shift, and enter state 21
			(reduce using rule 12)

	">="           shift, and enter state 22
			(reduce using rule 12)

	'>'            shift, and enter state 23
			(reduce using rule 12)

	true           shift, and enter state 5
			(reduce using rule 12)

	false          shift, and enter state 6
			(reduce using rule 12)

	if             shift, and enter state 7
			(reduce using rule 12)

	then           reduce using rule 12
	else           reduce using rule 12
	var            shift, and enter state 8
			(reduce using rule 12)

	'\\'           shift, and enter state 9
			(reduce using rule 12)

	'('            shift, and enter state 10
			(reduce using rule 12)

	')'            reduce using rule 12
	%eof           reduce using rule 12

	Exp            goto state 15

State 44

	Type -> '(' Type "->" . Type ')'                    (rule 20)

	'('            shift, and enter state 36
	Bool           shift, and enter state 37
	Number         shift, and enter state 38

	Type           goto state 46

State 45

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . "||" Exp                               (rule 9)
	Exp -> if Exp then Exp else Exp .                   (rule 11)
	Exp -> Exp . Exp                                    (rule 13)
	Exp -> Exp . "==" Exp                               (rule 15)
	Exp -> Exp . ">=" Exp                               (rule 16)
	Exp -> Exp . '>' Exp                                (rule 17)

	num            shift, and enter state 2
			(reduce using rule 11)

	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	"&&"           shift, and enter state 19
	"||"           shift, and enter state 20
	'!'            shift, and enter state 4
	"=="           shift, and enter state 21
	">="           shift, and enter state 22
	'>'            shift, and enter state 23
	true           shift, and enter state 5
			(reduce using rule 11)

	false          shift, and enter state 6
			(reduce using rule 11)

	if             fail
	then           reduce using rule 11
	else           reduce using rule 11
	var            shift, and enter state 8
			(reduce using rule 11)

	'\\'           shift, and enter state 9
			(reduce using rule 11)

	'('            shift, and enter state 10
			(reduce using rule 11)

	')'            reduce using rule 11
	%eof           reduce using rule 11

	Exp            goto state 15

State 46

	Type -> '(' Type "->" Type . ')'                    (rule 20)

	')'            shift, and enter state 47


State 47

	Type -> '(' Type "->" Type ')' .                    (rule 20)

	"->"           reduce using rule 20
	')'            reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 21
Number of terminals: 23
Number of non-terminals: 3
Number of states: 48
